import os
import datetime
import numpy as np
import time

from sgp4.api import Satrec, jday
from sgp4.conveniences import sat_epoch_datetime
from sgp4 import omm

import datetime
from poliastro.twobody.propagation.vallado import vallado as propagate
from scipy.spatial.distance import pdist

satellite_names = []
satellites = []
max_count = 1
latest_epoch = 0
k = 3.986004418 * (10**5)

with open(os.path.join(os.path.dirname(__file__), "starlink_11_01.xml")) as xml:
    segments = omm.parse_xml(xml)

    count = 0
    for segment in segments:
        sat = Satrec()
        omm.initialize(sat, segment)

        satellites.append(sat)
        satellite_names.append(segment["OBJECT_NAME"])

        if sat.epochdays > latest_epoch:
            latest_epoch = sat.epochdays

        count += 1
        if count >= max_count:
            break

satellite_names_new = []
satellites_new = []
with open(os.path.join(os.path.dirname(__file__), "starlink_23_01.xml")) as xml:
    segments = omm.parse_xml(xml)

    count = 0
    for segment in segments:
        sat = Satrec()
        omm.initialize(sat, segment)

        satellites_new.append(sat)
        satellite_names_new.append(segment["OBJECT_NAME"])

        if sat.epochdays > latest_epoch:
            latest_epoch = sat.epochdays

        count += 1
        if count >= max_count:
            break

# Start time: 2024-01-11T11:00:15.757344
start_time = datetime.datetime(2024, 1, 11, 0, 0, 0)
jd_start, jdF_start = jday(2024, 1, 11, 0, 0, 0)

# End time: 2024-01-23T09:37:23.377728
end_time = datetime.datetime(2024, 1, 23, 0, 0, 0)
jd_end, jdF_end = jday(2024, 1, 23, 0, 0, 0)


def get_pos_satellite(sat, jd, jdF):
    error, r, v = sat.sgp4(jd, jdF)
    assert error == 0

    return r, v


def propagate_n_satellites(sat_r, sat_v, tof):
    sat_new_r = []
    sat_new_v = []
    for i in range(len(sat_r)):
        r, v = propagate(k, sat_r[i], sat_v[i], tof, numiter=350)
        sat_new_r.append(r)
        sat_new_v.append(v)

    distances = pdist(sat_new_r)
    return sat_new_r, sat_new_v, distances


# start = time.process_time()


tof = 1
satellite_r = []
satellite_v = []

r0 = []
v0 = []
for sat in satellites:
    r, v = get_pos_satellite(sat, jd_start, jdF_start)
    r0.append(np.array(r))
    v0.append(np.array(v))

satellite_r.append(r0)
satellite_v.append(v0)

i = 0
c_time = start_time
while c_time < end_time:
    ri, vi, distances = propagate_n_satellites(satellite_r[i], satellite_v[i], tof)
    satellite_r.append(ri)
    satellite_v.append(vi)
    c_time += datetime.timedelta(seconds=1)
    i += 1

# print(time.process_time() - start)
# from satellite_visualization import visualize_data

# visualize_data(satellite_r)
jd, jdF = jday(
    c_time.year, c_time.month, c_time.day, c_time.hour, c_time.minute, c_time.second
)
final_state = {
    "satellite_name": "STARLINK-1007",
    "final_position": satellite_r[-1][0],
    "final_velocity": satellite_v[-1][0],
    "epoch": f"{jd}T{jdF:.6f}",
}

# Print the final state
print("Final State for old database:")
print("Satellite Name:", final_state["satellite_name"])
print("Final Position:", final_state["final_position"])
print("Final Velocity:", final_state["final_velocity"])
print("Epoch:", final_state["epoch"])


r0_new = []
v0_new = []
for sat in satellites_new:
    r, v = get_pos_satellite(sat, jd_end, jdF_end)
    r0_new.append(np.array(r))
    v0_new.append(np.array(v))

final_state_new = {
    "satellite_name": "STARLINK-1007",
    "final_position": r0_new[0],
    "final_velocity": v0_new[0],
    "epoch": f"{jd_end}T{jdF_end:.6f}",
}

# Print the final state
print("Final State for new database:")
print("Satellite Name:", final_state_new["satellite_name"])
print("Final Position:", final_state_new["final_position"])
print("Final Velocity:", final_state_new["final_velocity"])
print("Epoch:", final_state_new["epoch"])
